功能简介
==============
Python 渗透工具，或者渗透测试工具框架可能需要用到的组件：带结果反馈的线程池，支持大字典流式读取
以及进度保存的字典解析模块，以进程方式启动并加以监视控制与结果反馈的任务管理器，带有装饰器接口的日志
记录工具，除此之外，utils 还包含了一些有用的小工具：打印带颜色的文字，指定路径的 import 工具，
ip 计算工具，更加方便的 Python 自省工具。

线程池组件
-----------------

简介
^^^^^^^^
线程池的出现极大的方便了密集型任务的编程，在线程池组件的帮助下，一个任务密集型的程序将会极大被简化，
只需要维护一个稳定的任务队列并且定时从线程池的结果队列中获取任务反馈。

Quick Look
^^^^^^^^^^^^^^^^

.. code-block:: python

  import time
  from g3ar import ThreadPool

  def func(arg1):
    #
    # Do something intersting
    #
    time.sleep(5)
    return arg1

  pool = ThreadPool()
  pool.start()
  pool.feed(target_func=func, arg1=4)
  queue = pool.get_result_queue()
  result = queue.get()
  print(result)
  pool.stop()


这个最简单的例子，就是我们使用 ThreadPool 做的一个最简单的事情，也就是执行一个函数，然后再异步
收集结果。

我们分布来讲解这一段小代码：

.. code-block:: python

  from g3ar import ThreadPool
  def func(arg1):
    #
    # Do something intersting
    #
    time.sleep(5)
    return arg1


导入我们需要的 ThreadPool 然后并定义一个函数。

.. code-block:: python

  pool = ThreadPool()
  pool.start()

新建一个 ThreadPool 对象，然后开启线程池（start）。启动线程池之后，线程池对象会在内部启动若干
个线程，然后这些线程就会进入等待状态。当任务队列中出现任务的时候，线程就会提取任务队列中的任务，
然后执行相应的任务，把任务的执行情况放在结果队列中

.. code-block:: python

  pool.feed(target_func=func, arg1=4)

传入需要运行的函数，并且在 target_func 后输入其他的参数，例如在 func 中，arg1 是 func 的唯
一参数，因为后面必须要写出形参的名称和形参的值。

.. code-block:: python

  queue = pool.get_result_queue()
  result = queue.get()
  print(result)
  pool.stop()


通过 pool.get_result_queue()， 获取一个 Queue.Queue 对象，这个对象是 Python 内置的对象，
所以不做过多的说明，通过 queue.get() 来获取函数执行的结果。

当获取到需要的结果之后，通过 pool.stop() 来关闭线程池。

其他相关连接
---------------------

* `首页 <index.html>`_
* `总览 <overview.html>`_
* `功能简介 <func_quicklook.html>`_
